------------------------------------------------------------------------------------------------------
									Set
-----------------------------------------------------------------------------------------------------
Sets are a type of associative containers in which each element has to be unique, because the value of the element identifies it. The value of the element cannot be modified once it is added to the set, though it is possible to remove and add the modified value of that element. 

Sets are containers that store unique elements following a specific order.

Internally, the elements in a set are always sorted following a specific strict weak ordering criterion indicated by its internal comparison object (of type Compare).

Set containers are generally slower than unordered_set containers to access individual elements by their key, but they allow the direct iteration on subsets based on their order.

Sets are typically implemented as binary search trees.

Some basic functions associated with Set: 
	begin() – Returns an iterator to the first element in the set.
	end() – Returns an iterator to the theoretical element that follows last element in the set.
	size() – Returns the number of elements in the set.
	max_size() – Returns the maximum number of elements that the set can hold.
	empty() – Returns whether the set is empty
-----------------------------------------------------------------------
Declaration:
-----------------------------------------------------------------------
set<int>s; //Creates a set of integers.

-----------------------------------------------------------------------
Size:
-----------------------------------------------------------------------
int length=s.size(); //Gives the size of the set.


-----------------------------------------------------------------------
Insert:
-----------------------------------------------------------------------
s.insert(x); //Inserts an integer x into the set s.

-----------------------------------------------------------------------
Erasing an element:
-----------------------------------------------------------------------
s.erase(val); //Erases an integer val from the set s.

-----------------------------------------------------------------------
Finding an element:
-----------------------------------------------------------------------
set<int>::iterator itr=s.find(val); //Gives the iterator to the element val if it is found otherwise returns s.end() .
Ex: set<int>::iterator itr=s.find(100); //If 100 is not present then it==s.end().




----------------------------------------------------------------------------------------------
							Unordered Set:
----------------------------------------------------------------------------------------------
The unordered_set can contain key of any type – predefined or user-defined data structure but when we define key of type user define the type, we need to specify our comparison function according to which keys will be compared.

Unordered sets are containers that store unique elements in no particular order, and which allow for fast retrieval of individual elements based on their value.

Internally, the elements in the unordered_set are not sorted in any particular order, but organized into buckets depending on their hash values to allow for fast access to individual elements directly by their values

The Unordered_set allows only unique keys, for duplicate keys unordered_multiset should be used.

Time Complexity:
The time complexity of set operations is O(log n) while for unordered_set, it is O(1).



------------------------------------------------------------------------------------------------------
								Examples
-----------------------------------------------------------------------------------------------------


// C++ program to find duplicate from an array using 
// unordered_set 
#include <bits/stdc++.h> 
using namespace std; 
  
// Print duplicates in arr[0..n-1] using unordered_set 
void printDuplicates(int arr[], int n) 
{ 
    // declaring unordered sets for checking and storing 
    // duplicates 
    unordered_set<int> intSet; 
    unordered_set<int> duplicate; 
  
    // looping through array elements 
    for (int i = 0; i < n; i++) 
    { 
        // if element is not there then insert that 
        if (intSet.find(arr[i]) == intSet.end()) 
            intSet.insert(arr[i]); 
  
        // if element is already there then insert into 
        // duplicate set 
        else
            duplicate.insert(arr[i]); 
    } 
  
    // printing the result 
    cout << "Duplicate item are : "; 
    unordered_set<int> :: iterator itr; 
  
    // iterator itr loops from begin() till end() 
    for (itr = duplicate.begin(); itr != duplicate.end(); itr++) 
        cout << *itr << " "; 
} 
  
// Driver code 
int main() 
{ 
    int arr[] = {1, 5, 2, 1, 4, 3, 1, 7, 2, 8, 9, 5}; 
    int n = sizeof(arr) / sizeof(int); 
  
    printDuplicates(arr, n); 
    return 0; 
} 